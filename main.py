# –ê–≤—Ç–æ—Ä - cheuS1 | https://github.com/Telegram-search-anime-bo
import asyncio
import re
from warnings import filterwarnings
import datetime
import telegram.ext
import yaml
from telegram.warnings import PTBUserWarning
# –õ–æ–∞–¥–µ—Ä –∫–æ–Ω—Ñ—ñ–≥—É
with open('config.yaml', 'r') as file:
    loadedfile = yaml.safe_load(file)
    archiveID = loadedfile['archive_ID']
    token = loadedfile['TOKEN']
    donatefile = loadedfile['donate-file']
    iam = loadedfile['inline-additional-menu']
    searchtitlevideo = loadedfile['search_title_video_ID']

#import logging
#from telegram.ext import Application, CommandHandler, ContextTypes, filters, MessageHandler
from MySQL_Driver import startdbs
from telegram import (ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, KeyboardButton,
                      InlineQueryResultArticle, InputTextMessageContent, InlineQueryResultPhoto, Message,
                      InlineKeyboardButton, InlineKeyboardMarkup)
from telegram.ext import *
#from pathlib import Path
from conv_handlers import *
from functions import *
from file_func import *
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
log = logging.getLogger("KiotoBot")
filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)
##################### –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
allanimcategories = ["–ê–Ω—Ç–∏—É—Ç–æ–ø—ñ—è", "–î–µ–º–µ–Ω—Ü—ñ—è", "–ó–æ–º–±—ñ",
                     "–ú–∞—Ö–æ-—à—å–æ–¥–∂—å–æ", "–ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª—ñ–ø—Ç–∏–∫–∞", "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
                     "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–î–∂—å–æ—Å–µ–π", "–Ü—Å–µ–∫–∞–π", "–ú–µ—Ö–∞", "–†–æ–º–∞–Ω—Ç–∏–∫–∞",
                     "–§–µ–Ω—Ç–µ–∑—ñ", "–ë–æ–π–æ–≤–∏–∫", "–î—Ä–∞–º–∞", "–Ü—Å—Ç–æ—Ä—ñ—è", "–ú—ñ—Å—Ç–∏–∫–∞", "–°–µ–π–Ω–µ–Ω",
                     "–®–∫–æ–ª–∞", "–ë—É–¥–µ–Ω–Ω—ñ—Å—Ç—å", "–î–ª—è –¥—ñ—Ç–µ–π", "–ö–∞–∑–∫–∞", "–ú—É–∑–∏–∫–∞", "–°–ø–æ—Ä—Ç",
                     "–®—å–æ–¥–∂—å–æ", "–í—ñ–π–Ω–∞", "–ï—Ä–æ—Ç–∏–∫–∞", "–ö–æ–º–µ–¥—ñ—è", "–ù–∞–¥–ø—Ä–∏—Ä–æ–¥–Ω–µ", "–®—å–æ–¥–∂—å–æ-a—ó", "–®—å–æ–Ω–µ–Ω",
                     "–ì–æ—Ç–∏–∫–∞", "–ï—á—á—ñ", "–ö—ñ–±–µ—Ä–ø–∞–Ω–∫", "–ü–∞—Ä–æ–¥—ñ—è", "–®—å–æ–Ω–µ–Ω-a—ó", "–î–µ—Ç–µ–∫—Ç–∏–≤", "–ñ–∞—Ö–∏", "–ö–æ–¥–æ–º–æ", "–ü—Ä–∏–≥–æ–¥–∏",
                     "–¢—Ä–∏–ª–ª–µ—Ä", "–ü–æ–≤—Å—è–∫–¥–µ–Ω–Ω—ñ—Å—Ç—å", "–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è", "–í–∞–º–ø—ñ—Ä–∏", "–ï–∫—à–Ω"]
allanimtypes = ["–¢–í", "–ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–Ω–∏–π —Ñ—ñ–ª—å–º", "–§—ñ–ª—å–º", "–û–í–ê", "–í–µ–±", "–°–ø–µ—à–ª"]

add_title_s, add_title_s1, add_title_s2, add_title_s3, add_title_s4, add_title_s5, add_title_s6, add_title_s7, add_title_s8, add_title_s9, add_title_s10, add_title_s11, add_title_s12, add_title_s13, add_title_s14,add_title_s15, add_title_final = range(17)
del_title_s, del_title_s1, del_title_s2, del_title_s3 = range(4)
add_video = range(1)
del_vl = range(1)
vlid_title_change, vlid_title_change1 = range(2)
vlid_update, vlid_update1 = range(2)
replace_info = range(1)
c_s = range(1)
ccng, ccng1 = range(2)
trntedit, trntedit1 = range(2)
urlget = range(1)
upt, upt2 = range(2)
rmoney = range(1)
# InlineKeyboards
k_start = [["üîç –ó–Ω–∞–π—Ç–∏"], ["üí≠ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"]]
k_start_adm = [["üîç –ó–Ω–∞–π—Ç–∏"], ["‚ùóÔ∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"], ["üí≠ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"]]
k_admpanel = [["–î–æ–±–∞–≤–∏—Ç–∏ —Ç–∞–π—Ç–ª", "–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∞–π—Ç–ª", "–ó–º—ñ–Ω–∞ —Å—Ç–∞–Ω—É —Ç–∞–π—Ç–ª—É", "–ü–ª–µ—î—Ä"],
              ["–ö–∞–ª–µ–Ω–¥–∞—Ä","–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏", "–°–ø–∏—Å–æ–∫ —Ç–∞–π—Ç–ª—ñ–≤","–î–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", "–í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]]
k_advtools = [["–¢–æ—Ä—Ä–µ–Ω—Ç —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è","–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è","–ó–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–∫","–ù–∞–∑–∞–¥"]]
k_replace = [["–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é","–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ \"–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å\"","–ù–∞–∑–∞–¥"]]
k_calendar = [["–ó–º—ñ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–∞–ª–µ–Ω–¥–∞—Ä—è","–û–Ω–æ–≤–∏—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä","–í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]]
k_player = [["–î–æ–±–∞–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", "–í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ VideoList"],
            ["–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ VLID —Ç–∞–π—Ç–ª—É", "–°–ø–∏—Å–æ–∫ –ø–æ VLID", "–ù–∞–∑–∞–¥"]]
k_addtitile = [["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è", "–ù–∞–∑–∞–¥"]]
k_cancel = [["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]]

# –§—É–Ω–∫—Ü—ñ—ó
async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log.info(
        f"–ü—Ä–∏–π–Ω—è—Ç–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é InlineQuery, —é–∑–µ—Ä {update.effective_user.full_name} {update.effective_user.id}")
    query = update.inline_query
    ql = QueryList(query.query)
    print(f"QUERY: {query.query}")
    if not ql:
        return
    a = await query.answer(results=ql, is_personal=True)
    if a:
        log.info(f"–ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ, —é–∑–µ—Ä {update.effective_user.full_name} {update.effective_user.id}")
    else:
        log.error(f"–ó–∞–ø–∏—Ç –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ!. —é–∑–µ—Ä {update.effective_user.full_name} {update.effective_user.id}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    await update.effective_message.delete()
    args = msg.text.split(" ")
    print(args)
    if len(args) == 1:
        if chat.type == "private":
            if UserIsAdmin(user.id):
                await chat.send_message("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç–∏–∫ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –∫—ñ–æ—Ç–∏–∫–∞–º –≤ –ø–æ—à—É–∫—É —Ç–∞–π—Ç–ª—ñ–≤!", reply_markup=ReplyKeyboardMarkup(k_start_adm))
            else:
                await chat.send_message("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç–∏–∫ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –∫—ñ–æ—Ç–∏–∫–∞–º –≤ –ø–æ—à—É–∫—É —Ç–∞–π—Ç–ª—ñ–≤!", reply_markup=ReplyKeyboardMarkup(k_start))
    else:
        p = ParseIDTitle(args[1])
        if len(p) == 0:
            print("–°—Ç–∞—Ä—Ç –Ω–µ –Ü–î")
        else:
            keyword = args[1]
            print(f"{keyword} KEY")
            a = ParseIDTitle(keyword)[0]
            photo = Path(f"Data/Images/{keyword}")
            await chat.send_photo(photo=open(photo, "rb"))
            if len(a[6]) == 0:
                season = ""
            else:
                season = f"({a[6]})"
            categories = ', '.join(a[3].split(","))
            stR = a[8]
            if stR is None:
                st = "–ù–µ –≤–∫–∞–∑–∞–Ω–∏–π"
            elif len(stR) == 0:
                st = "–ù–µ –≤–∫–∞–∑–∞–Ω–∏–π"
            elif stR == "0":
                st = "‚ö†Ô∏è –û–∑–≤—É—á—É—î—Ç—å—Å—è"
            elif stR == "1":
                st = "‚úÖ –ó–∞–∫—ñ–Ω—á–µ–Ω–∏–π"
            elif stR == "2":
                st = "‚ùî –û–Ω“ë–æ—ó–Ω“ë"
            else:
                st = f"–ù–µ–≤—ñ–¥–æ–º–∏–π({a[8]}"
            # f"<b></b> <i></i>"
            msg = (f"<b>{a[1]} / {a[4]} {season}</b>\n\n"
                   f"<b>–°—Ç–∞–Ω: {st}</b>\n\n"
                   f"<b>–¢–∏–ø:</b> <i>{a[11]}</i>\n"
                   f"<b>–ñ–∞–Ω—Ä:</b> <i>{categories}</i>\n"
                   f"<b>–°–µ–∑–æ–Ω:</b> <i>{a[12]}</i>\n"
                   f"<b>–û–∑–≤—É—á—É–≤–∞–ª–∏ –∞–Ω—ñ–º–µ:</b> <i>{a[7]}</i>\n"
                   f"<b>–ü–µ—Ä–µ–∫–ª–∞–¥:</b> <i>{a[9]}</i>\n"
                   f"<b>–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å–µ—Ä:</b> <i>{a[10]}</i>\n\n"
                   f"<b>–û–ø–∏—Å:</b> <i>{a[2]}</i>"
                   )
            msg_adm = (f"<b>{a[1]} / {a[4]} {season}</b>\n\n"
                       f"<b>–°—Ç–∞–Ω: {st}</b>\n\n"
                       f"<b>–¢–∏–ø:</b> <i>{a[11]}</i>\n"
                       f"<b>–ñ–∞–Ω—Ä:</b> <i>{categories}</i>\n"
                       f"<b>–°–µ–∑–æ–Ω:</b> <i>{a[12]}</i>\n"
                       f"<b>–û–∑–≤—É—á—É–≤–∞–ª–∏ –∞–Ω—ñ–º–µ:</b> <i>{a[7]}</i>\n"
                       f"<b>–ü–µ—Ä–µ–∫–ª–∞–¥:</b> <i>{a[9]}</i>\n"
                       f"<b>–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å–µ—Ä:</b> <i>{a[10]}</i>\n\n"
                       f"<b>–û–ø–∏—Å:</b> <i>{a[2]}</i>\n\n"
                       f"–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–∞–π—Ç–ª—É: {a[0]}")
            video = ""
            for x in ParseVLIDVideos(a[5]):
                if x[3] == 1:
                    video = x[4]
                    break
            if a[13] is None or len(a[13]) == 0:
                trnt = 0
            else:
                trnt = 1
            if len(a[5]) == 0:
                if UserIsAdmin(user.id):
                    await chat.send_message(msg_adm, disable_web_page_preview=True,
                                            parse_mode=telegram.constants.ParseMode.HTML)
                else:
                    await chat.send_message(msg, disable_web_page_preview=True,
                                            parse_mode=telegram.constants.ParseMode.HTML)
            else:
                if UserIsAdmin(user.id):
                    if trnt == 0:
                        await chat.send_message(msg_adm, disable_web_page_preview=True,
                                                parse_mode=telegram.constants.ParseMode.HTML,
                                                reply_markup=InlineKeyboardMarkup([
                                                    [InlineKeyboardButton(text="–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ—ó",
                                                                          callback_data=f"v_{video}")]
                                                ]))
                    else:
                        await chat.send_message(msg_adm, disable_web_page_preview=True,
                                                parse_mode=telegram.constants.ParseMode.HTML,
                                                reply_markup=InlineKeyboardMarkup([
                                                    [InlineKeyboardButton(text="–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ—ó",
                                                                          callback_data=f"v_{video}")]
                                                    ,
                                                    [InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç",
                                                                          callback_data=f"sd_{a[0]}")]
                                                ]))
                else:
                    if len(a[13]) == 0:
                        await chat.send_message(msg, disable_web_page_preview=True,
                                                parse_mode=telegram.constants.ParseMode.HTML,
                                                reply_markup=InlineKeyboardMarkup([
                                                    [InlineKeyboardButton(text="–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ—ó",
                                                                          callback_data=f"v_{video}")]
                                                ]))
                    else:
                        await chat.send_message(msg, disable_web_page_preview=True,
                                                parse_mode=telegram.constants.ParseMode.HTML,
                                                reply_markup=InlineKeyboardMarkup([
                                                    [InlineKeyboardButton(text="–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ—ó",
                                                                          callback_data=f"v_{video}")],
                                                    [InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç",
                                                                          callback_data=f"sd_{a[0]}")]
                                                ]))


    return ConversationHandler.END


async def start_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if UserIsAdmin(user.id):
        await chat.send_message("–ß–æ–≥–æ –±–∞–∂–∞—î—à?", reply_markup=ReplyKeyboardMarkup(k_start_adm))
    else:
        await chat.send_message("–ß–æ–≥–æ –±–∞–∂–∞—î—à?", reply_markup=ReplyKeyboardMarkup(k_start))
    print("Stb+")
    return ConversationHandler.END


async def playerinfo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if UserIsAdmin(update.effective_user.id):
        await update.effective_chat.send_message("–©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?", reply_markup=ReplyKeyboardMarkup(k_player))

async def replaceinfo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if UserIsAdmin(update.effective_user.id):
        await update.effective_chat.send_message("–©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?", reply_markup=ReplyKeyboardMarkup(k_replace))
async def search_title_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = ReadOtherFile("search_title_video.txt")
    msg = msg.replace("BOTUSERNAME", context.bot.username)
    if int(searchtitlevideo) == 0:
        await update.effective_chat.send_message(text=msg, parse_mode=telegram.constants.ParseMode.HTML, reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ—à—É–∫", switch_inline_query_current_chat="")]
            ]))
    else:
        await update.effective_chat.send_video(
            video="BAACAgIAAx0CecxgbAADGGWj3mePh59oE-CBKERduXCs7XMZAAIbQAACOPAhSSvohvo-RHGENAQ", caption=msg,
            parse_mode=telegram.constants.ParseMode.HTML, reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ—à—É–∫", switch_inline_query_current_chat="")]
            ]))


async def adm_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if UserIsAdmin(update.effective_user.id):
        chat = update.effective_chat
        msg = update.effective_message
        user = update.effective_user
        await chat.send_message("–í—ñ—Ç–∞—é —É –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ!")
        await chat.send_message("–©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?", reply_markup=ReplyKeyboardMarkup(k_admpanel))


async def adm_start_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if UserIsAdmin(update.effective_user.id):
        chat = update.effective_chat
        msg = update.effective_message
        user = update.effective_user
        await chat.send_message("–©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?", reply_markup=ReplyKeyboardMarkup(k_admpanel))
        RemoveTempUser(user.id)
        RemoveValueUser(user.id)
    print("aDM+")
    return ConversationHandler.END

async def addtoolsinfo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if UserIsAdmin(update.effective_user.id):
        await update.effective_chat.send_message("–©–æ –æ–±–µ—Ä–µ—à?",reply_markup=ReplyKeyboardMarkup(k_advtools))
async def add_title_pre(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    if UserIsAdmin(user.id):
        await chat.send_message("–Ø–∫–∏–º —Å–∞–º–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º —Ç–∏ –±–∞–∂–∞—î—à —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å?",
                                reply_markup=ReplyKeyboardMarkup(k_addtitile))


async def add_title_standart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if not UserIsAdmin(update.effective_user.id):
        return ConversationHandler.END
    a = TotalRandom()
    context.user_data['TT'] = a
    await chat.send_message(
        f"–¢–∏ –∑–∞–ø—É—Å—Ç–∏–≤ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞–π—Ç–ª—É –¥–æ –ë–î\n–î–æ—Ç—Ä–∏–º—É–π—Å—è —Ç–æ–≥–æ, —â–æ —è –ø—Ä–æ—à—É —ñ —Ç–∞–π—Ç–ª –±—É–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–∞–π—Ç–ª—É: {a}",
        reply_markup=ReplyKeyboardMarkup(k_cancel))
    await chat.send_message(
        "–ü—Ä–∏–º—ñ—Ç–∫–∞: –°—Ç–∞—Ä–∞–π—Å—è –ø–∏—Å–∞—Ç–∏ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫, —Ç–æ–º—É —â–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø—Ä–∏–π–¥–µ—Ç—å—Å—è –ø–æ—á–∏–Ω–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É. –¢–∞–∫–æ–∂ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π [ ] { } __ —ñ —Ç–æ–º—É –ø–æ–¥—ñ–±–Ω—ñ –∑–Ω–∞–∫–∏. \n–¶–µ –∑–Ω–∞–∫–∏ MarkDown, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–ø–µ–≤–Ω–∏–π —É —ó—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –Ω–∞–ø–∏—Å–∞–Ω–Ω—ñ")
    await chat.send_message("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω–∞–∑–≤—É —Ç–∞–π—Ç–ª—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é: (–ó–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ, –∑–Ω–∞–∫ ` –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ —Ç–µ–∫—Å—Ç—É)")
    AddTempUser(user.id, a)
    print(temp_addtitle)
    return add_title_s


async def add_title_standart1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    InitTitle(context.user_data['TT'], msg.text)
    await chat.send_message(
        "–î–æ–±—Ä–µ! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –Ω–∞–∑–≤—É –º–æ–≤–æ—é –∞–≤—Ç–æ—Ä–∞: (–ó–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ, –∑–Ω–∞–∫ ` –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ —Ç–µ–∫—Å—Ç—É)")
    return add_title_s1


async def add_title_standart2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    categories = ', '.join(allanimcategories)
    UpdateTitles(UserTempTitleID(user.id), "OriginalName", RBS(msg.text))
    await chat.send_message(
        "–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –∂–∞–Ω—Ä–∏ –∞–Ω—ñ–º–µ: (–ú–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É: –µ—á—á—ñ,–¥–µ–º–µ–Ω—Ü—ñ—è,–∫–æ–º–æ–¥–æ | –ë–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ –º—ñ–∂ –∫–æ–º–∞–º–∏ —Ç–∞ —Å–ª–æ–≤–∞–º–∏)")
    await chat.send_message(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∂–∞–Ω—Ä–∏ –∞–Ω—ñ–º–µ: \n\n{categories}")
    return add_title_s2


async def add_title_standart3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    mv = 0
    if len(msg.text.split(",")) == 1:
        if msg.text in allanimcategories:
            await chat.send_message(
                "–ñ–∞–Ω—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –æ–ø–∏—Å —Ç–∞–π—Ç–ª—É: (–ó–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ, –∑–Ω–∞–∫ ` –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ —Ç–µ–∫—Å—Ç—É) ")
            UpdateTitles(UserTempTitleID(user.id), "Category", RBS(msg.text))
            return add_title_s3
        else:
            await chat.send_message("–ñ–∞–Ω—Ä –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

    elif len(msg.text.split(",")) > 1:

        for x in msg.text.split(","):
            if not x in allanimcategories:
                await chat.send_message(f'–ñ–∞–Ω—Ä "{x}" –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!')
                mv = 1
                continue
        if mv == 0:
            await chat.send_message(
                "–ñ–∞–Ω—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –æ–ø–∏—Å —Ç–∞–π—Ç–ª—É: (–û–ø–∏—Å –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ 186 —Å–ª—ñ–≤ –∞–±–æ 1024 —Å–∏–º–≤–æ–ª—ñ–≤) ")
            UpdateTitles(UserTempTitleID(user.id), "Category", RBS(msg.text))
            return add_title_s3


async def add_title_standart4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if len(msg.text) >= 1024:
        await chat.send_message("–û–ø–∏—Å –ø–µ—Ä–µ–≤–∏—â—É—î 1024 —Å–∏–º–≤–æ–ª—ñ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
    else:
        UpdateTitles(UserTempTitleID(user.id), "Description", RBS(msg.text))
        await chat.send_message("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ù–∞–¥—ñ—à–ª–∏ —Å–µ–∑–æ–Ω —Ç–∞–π—Ç–ª—É: (–Ø–∫—â–æ —Ç–∞–π—Ç–ª –æ–¥–Ω–æ—Å–µ–∑–æ–Ω–Ω–∏–π, –Ω–∞–¥—ñ—à–ª–∏ –Ω—É–ª—å - 0)")
        await chat.send_message("–ü—Ä–∏–∫–ª–∞–¥: –°–µ–∑–æ–Ω 1, —á–∞—Å—Ç–∏–Ω–∞ 1/2")
        return add_title_s4


async def add_title_standart5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if msg.text == "0":
        UpdateTitles(UserTempTitleID(user.id), "Season", "")
    else:
        UpdateTitles(UserTempTitleID(user.id), "Season", RBS(msg.text))
    await chat.send_message("–ß—É–¥–æ–≤–æ! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∞–∫—Ç–æ—Ä—Å—å–∫–∏–π —Å–∫–ª–∞–¥(–∞–∫—Ç–æ—Ä–∏ –æ–∑–≤—É—á–µ–Ω–Ω—è, –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å–µ—Ä–∏ —ñ —Ç.–¥.)")
    await chat.send_message("–ü—Ä–∏–º—ñ—Ç–∫–∞:\n\n"
                            "–ó–Ω–∞–∫ ` –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ!",
                            disable_web_page_preview=True)
    await chat.send_message(
        "–ü—Ä–∏–∫–ª–∞–¥: –ú–∞–ª–∏–Ω–∫–∞, –Ø–≥—ñ–¥–∫–∞, –ü–∏—Ä—ñ–∂–æ—á–æ–∫, –ì–∞–Ω–≥—Å—Ç–µ—Ä")
    return add_title_s5


async def add_title_standart6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    UpdateTitles(UserTempTitleID(user.id), "Actors", RBS(msg.text))
    await chat.send_message("–ó–∞–ª–∏—à–∏–ª–æ—Å—å —â–µ —Ç—Ä–æ—Ö–∏! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ VideoListID –Ω–∞ —Å–ø–∏—Å–æ–∫")
    await chat.send_message(
        "–ü—Ä–∏–º—ñ—Ç–∫–∞:\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π VideoListID –Ω–µ –¥–∞—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–Ω—ñ–º–µ, —Ç–æ–º—É –í–∞–º –ø—Ä–∏–π–¥–µ—Ç—å—Å—è –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç–∞–π—Ç–ª.\n–Ø–∫—â–æ –≤–∏–±—Ä–∞—Ç–∏ –≤–∂–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫, –≤—ñ–Ω –ø–µ—Ä–µ–ø—Ä–∏–≤'—è–∂–µ—Ç—å—Å—è.")
    await chat.send_message("–ü—Ä–∏–∫–ª–∞–¥: Dji2rjaD92dfpagjmnvj5")

    UIDs = []
    msg = "–°–ø–∏—Å–∫–∏ –≤—ñ–¥–µ–æ–ø–ª–µ—î—Ä–∞:\n\n"
    mv = 1
    pv = ParseAllVideos()
    pt = ParseAllTitles()
    for x in pv:
        UIDs.extend([x[0]])
    UIDs = list(set(UIDs))
    conx = 0
    for x in UIDs:
        for x1 in pt:
            if x == x1[5]:
                conx = x1[1]
                break
            else:
                conx = 0
        if conx == 0:
            con = "–í—ñ–¥—Å—É—Ç–Ω—è"
        else:
            con = conx
        msg += f"{mv}. VLID: {x} | –ü—Ä–∏–≤'—è–∑–∫–∞: {con}\n"
        mv += 1
    await chat.send_message(msg)

    return add_title_s6


async def add_title_standart7(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if not CheckListVILD(msg.text):
        await chat.send_message("–¢–∞–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
    else:
        a = CheckListConVILD(msg.text)
        if not a:
            UpdateTitles(UserTempTitleID(user.id), "VideoPost", RBS(msg.text))
            await chat.send_message("–¢–∏ –ø—Ä–æ—Å—Ç–æ —á—É–¥–æ! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ —Ç–∞–π—Ç–ª—É:")
            await chat.send_message("–ü—Ä–∏–º—ñ—Ç–∫–∞:\n"
                                    "–ö–∏–¥–∞—Ç–∏ —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –Ω–µ —è–∫ —Ñ–∞–π–ª!")
            return add_title_s7
        else:
            await chat.send_message("–°–ø–∏—Å–æ–∫ –≤–∂–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π. –ü–µ—Ä–µ–ø—Ä–∏–≤'—è–∑—É—é —Å–ø–∏—Å–æ–∫ –¥–æ –Ω–æ–≤–æ–≥–æ —Ç–∞–π—Ç–ª—É.")
            await chat.send_message(f"–ó–∞—É–≤–∞–∂—Ç–µ, —Å–ø–∏—Å–æ–∫ –±—É–≤ –≤—ñ–¥–≤'—è–∑–∞–Ω–∏–π –≤—ñ–¥ —Å—Ç–∞—Ä–æ–≥–æ —Ç–∞–π—Ç–ª—É: {ParseIDTitle(a)[0][1]}")
            UpdateTitles(a, "VideoPost", "")
            UpdateTitles(UserTempTitleID(user.id), "VideoPost", RBS(msg.text))
            await chat.send_message("–¢–∏ –ø—Ä–æ—Å—Ç–æ —á—É–¥–æ! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ —Ç–∞–π—Ç–ª—É:")
            await chat.send_message("–ü—Ä–∏–º—ñ—Ç–∫–∞:\n"
                                    "–ö–∏–¥–∞—Ç–∏ —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –Ω–µ —è–∫ —Ñ–∞–π–ª!")
            return add_title_s7


async def add_title_standart8(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    sp = Path(f"Data/Images/{UserTempTitleID(user.id)}")
    file = await context.bot.get_file(update.message.photo[-1])
    await file.download_to_drive(sp)
    """await chat.send_message("–¢–∞–π—Ç–ª –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î:")
    a = ParseIDTitle(UserTempTitleID(user.id))[0]
    msg = (f"{a[1]} {a[6]}\n"
           f"{a[4]}\n\n"
           f"–û–ø–∏—Å: {a[2]}\n\n"
           f"–ñ–∞–Ω—Ä: {a[3]}\n\n"
           f"–°–∫–ª–∞–¥ –∫–æ–º–∞–Ω–¥–∏ –æ–∑–≤—É—á–µ–Ω–Ω—è: {a[7]}\n\n"
           f"–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: {a[5]}")
    await chat.send_photo(caption=msg, photo=open(sp, "rb"), reply_markup=ReplyKeyboardMarkup(k_admpanel))
    RemoveTempUser(user.id)
    return ConversationHandler.END"""
    await chat.send_message("–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø—É–ø—Å–∏–∫—ñ–≤, —è–∫—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–ª–∏ —Ç–∞–π—Ç–ª:")
    return add_title_s8
async def add_title_standart9(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    UpdateTitles(UserTempTitleID(user.id), "Translator", msg.text)
    await chat.send_message("–ú–æ–ª–æ–¥–µ—Ü—å! –¢–µ–ø–µ—Ä —è –æ—á—ñ–∫—É—é –≤—ñ–¥ —Ç–µ–±–µ –∫–ª–∏—á–∫—É –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å–µ—Ä–∞(-—ñ–≤):")
    return add_title_s9
async def add_title_standart10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    UpdateTitles(UserTempTitleID(user.id), "Soundman", msg.text)
    await chat.send_message("–¢–∏–ø —Ç–∞–π—Ç–ª—É?:")
    await chat.send_message("–¢–∏–ø–∏: –¢–í, –ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–Ω–∏–π —Ñ—ñ–ª—å–º, –§—ñ–ª—å–º, –û–í–ê, –í–µ–±, –°–ø–µ—à–ª")
    return add_title_s10
async def add_title_standart11(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if msg.text in allanimtypes:
        UpdateTitles(UserTempTitleID(user.id), "Type", msg.text)
        await chat.send_message("–¢–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–π—á–∏–∫! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –°–µ–∑–æ–Ω —Ç–∞–π—Ç–ª—É")
        await chat.send_message("–°–µ–∑–æ–Ω–∏: –ó–∏–º–∞, –í–µ—Å–Ω–∞, –õ—ñ—Ç–æ, –û—Å—ñ–Ω—å")
        return add_title_s11
    else:
        await chat.send_message(f"–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Ç–∏–ø—É —Ç–∞–π—Ç–ª—É: {msg.text}")
        await chat.send_message("–ü–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
        await chat.send_message("–¢–∏–ø —Ç–∞–π—Ç–ª—É:")
async def add_title_standart12(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if msg.text in ["–ó–∏–º–∞","–í–µ—Å–Ω–∞","–õ—ñ—Ç–æ","–û—Å—ñ–Ω—å"]:
        UpdateTitles(UserTempTitleID(user.id), "Age", msg.text)
        await chat.send_message("–ù–∞–¥—ñ—à–ª–∏ Torrent-—Ñ–∞–π–ª")
        await chat.send_message("–Ø–∫—â–æ —Ç–∞–∫–æ–≥–æ –Ω–µ–º–∞—î, –Ω–∞–¥—ñ—à–ª–∏ 0")
        return add_title_s13
    else:
        await chat.send_message(f"–Ø –Ω–µ –∑–Ω–∞—é —Å–µ–∑–æ–Ω—É: {msg.text}")
        await chat.send_message("–ü–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
        await chat.send_message("–°–µ–∑–æ–Ω —Ç–∞–π—Ç–ª—É:")

async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(update.effective_message.text)
async def add_title_standart13(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user

    tr = trntTotalRandom()
    context.user_data['tr'] = tr
    p = Path(f"Data/Torrents/{tr}.torrent")
    print(f"MSG: {msg}")
    if msg.text is None:
        msf = await context.bot.get_file(msg.document)
        await msf.download_to_drive(p)
        UpdateTitles(UserTempTitleID(user.id), "Torrent", tr)
        await chat.send_message("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ä—ñ–∫ –≤–∏—Ö–æ–¥—É —Ç–∞–π—Ç–ª—É:")
        await chat.send_message("–ü—Ä–∏–∫–ª–∞–¥: 2014")
        return add_title_s14
    elif msg.text == "0":
        UpdateTitles(UserTempTitleID(user.id), "Torrent", "")
        await chat.send_message("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ä—ñ–∫ –≤–∏—Ö–æ–¥—É —Ç–∞–π—Ç–ª—É:")
        await chat.send_message("–ü—Ä–∏–∫–ª–∞–¥: 2014")
        return add_title_s14
    else:
        await chat.send_message("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
async def add_title_standart14(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if msg.text.isdigit():
        aaa = msg.text.replace(" ", "")
        UpdateTitles(UserTempTitleID(user.id), "Year", aaa)
        p = Path(f"Data/Torrents/{context.user_data['tr']}.torrent")
        a = ParseIDTitle(UserTempTitleID(user.id))[0]
        await chat.send_message("–¢–∞–π—Ç–ª –¥–æ–¥–∞–Ω–æ!", reply_markup=ReplyKeyboardMarkup(k_admpanel))
        if trntexists(p) == 0:
            trnt = "–í—ñ–¥—Å—É—Ç–Ω—ñ–π"
        else:
            trnt = f"{a[13]}"
        msg = (f"{a[1]} {a[6]}\n"
               f"{a[4]}\n\n"
               f"–û–ø–∏—Å: {a[2]}\n\n"
               f"–¢–∏–ø: {a[11]}\n\n"
               f"–ñ–∞–Ω—Ä: {a[3]}\n\n"
               f"–°–∫–ª–∞–¥ –∫–æ–º–∞–Ω–¥–∏ –æ–∑–≤—É—á–µ–Ω–Ω—è: {a[7]}\n\n"
               f"VLID: {a[5]}\n\n"
               f"Torrent: {trnt}\n\n"
               f"–†—ñ–∫ {a[14]}\n\n"
               )
        if len(msg) > 1000:
            msg = ("–£—Å–ø—ñ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                   "–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞, —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É —Å–∏–º–≤–æ–ª—ñ–≤.")
        sp = Path(f"Data/Images/{a[0]}")
        try:
            await chat.send_photo(caption=msg, photo=open(sp, "rb"))
            RemoveTempUser(user.id)
        except Exception as e:
            print(e)
        finally:
            return ConversationHandler.END
    else:
        await chat.send_message("–©–æ—Å—å –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")

"""async def trntTOmagnet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if UserIsAdmin(user.id):
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ—Ä–µ–Ω—Ç —Ñ–∞–π–ª—É –Ω–∞ –º–∞–≥–Ω–µ—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è",
                                reply_markup=ReplyKeyboardMarkup(k_cancel))
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ—Ä–µ–Ω—Ç —Ñ–∞–π–ª—É –Ω–∞ –º–∞–≥–Ω–µ—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
        await chat.send_message("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ Torrent-—Ñ–∞–π–ª —ñ —è –Ω–∞–¥—ñ—à–ª—é —Ç–æ–±—ñ Magnet –ø–æ—Å–∏–ª–∞–Ω–Ω—è:")
        return trntmag
    else:
        return ConversationHandler.END

async def trntTOmagnet1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    file = await context.bot.get_file(update.effective_message.document)
    p = Path(f"Data/tmp/{tmpTotalRandom()}")
    print(p)
    await file.download_to_drive(p)
    ctf = check_torrent_file(p)
    if not ctf:
        await chat.send_message("–î–∏–≤–Ω–∏–π —Ç–æ—Ä–µ–Ω—Ç, —è –Ω–µ –º–æ–∂—É –π–æ–≥–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π —Ç–æ—Ä–µ–Ω—Ç-—Ñ–∞–π–ª:")
    elif not None:
        await chat.send_message(f"–¢–≤–æ—î Magnet –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n\n<code>{ctf}</code>",parse_mode=telegram.constants.ParseMode.HTML, reply_markup=ReplyKeyboardMarkup(k_advtools) )
        os.remove(p)
        return ConversationHandler.END
    else:
        print("–Ø–∫–∞—Å—å —Ö—É–π–Ω—è –∑ –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Ç–æ—Ä–µ–Ω—Ç—É")"""

async def trnteditf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if not UserIsAdmin(user.id):
        return ConversationHandler.END
    else:
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–º—ñ–Ω–∏ —Ç–æ—Ä–µ–Ω—Ç—É —É —Ç–∞–π—Ç–ª–∞. –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ç–∞–π—Ç–ª —á–µ—Ä–µ–∑ @pankioto_bot:", reply_markup=ReplyKeyboardMarkup(k_cancel))
        return trntedit
async def trnteditf1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    pattern = r'^/search_(\w+)$'
    match = re.match(pattern, msg.text)
    keyword = match.group(1)
    a = ParseIDTitle(keyword)[0]
    print(f"{keyword} KEY")
    if not len(a) == 0:
        await chat.send_message(f"–¢–∞–π—Ç–ª {a[1]} {a[6]} –ø—Ä–∏–π–Ω—è—Ç–æ.")
        AddTempUser(user.id, keyword)
        await chat.send_message("–û—á—ñ–∫—É—é –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–æ—Ä–µ–Ω—Ç —Ñ–∞–π–ª—É:")
        return trntedit1
async def trnteditf2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    msf = await context.bot.get_file(msg.document)
    a = ParseIDTitle(UserTempTitleID(user.id))[0]
    tr = trntTotalRandom()
    p = Path(f"Data/Torrents/{tr}.torrent")
    if not a[13] is None:
        if trntexists(f"Data/Torrents/{a[13]}.torrent"):
            os.remove(f"Data/Torrents/{a[13]}.torrent")
    try:
        await msf.download_to_drive(p)

        UpdateTitles(UserTempTitleID(user.id), "Torrent", tr)
        await chat.send_message("–¢–æ—Ä–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=ReplyKeyboardMarkup(k_advtools))
        RemoveTempUser(user.id)
    except Exception as e:
        print(e)
    finally:
        return ConversationHandler.END

async def getURL(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if not UserIsAdmin(user.id):
        return ConversationHandler.END
    else:
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–∞–π—Ç–ª. –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ç–∞–π—Ç–ª —á–µ—Ä–µ–∑ @pankioto_bot:",
                                reply_markup=ReplyKeyboardMarkup(k_cancel))
        return urlget

async def getURL1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    pattern = r'^/search_(\w+)$'
    match = re.match(pattern, msg.text)
    keyword = match.group(1)
    a = ParseIDTitle(keyword)[0]
    print(f"{keyword} KEY")
    if not len(a) == 0:
        await chat.send_message(f"–¢–∞–π—Ç–ª {a[1]} {a[6]} –ø—Ä–∏–π–Ω—è—Ç–æ.", reply_markup=ReplyKeyboardMarkup(k_advtools))
        await chat.send_message(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: https://t.me/pankioto_bot?start={keyword}")
        return ConversationHandler.END
    else:
        await chat.send_message("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
async def undone_add_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    p = Path(f"Data/Torrents/{UserTempTitleID(user.id)}.torrent")
    if trntexists(p):
        os.remove(p)
    try:
        DeleteTitleID(UserTempTitleID(user.id))
        RemoveTempUser(user.id)
    except Exception as e:
        print(e)
    print(temp_addtitle)
    await adm_start_back(update, context)
    return ConversationHandler.END


async def AdminList(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if UserIsAdmin(user.id):
        mv = 1
        a = ParseAllAdm()
        if len(a) == 0:
            await chat.send_message("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ")
        else:
            msg = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏\n\n"
            for x in a:
                msg = msg + f"{mv}. UserID: {x[0]}\n"
                mv = mv + 1
        await chat.send_message(msg)


async def search_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    pattern = r'^/search_(\w+)$'
    match = re.match(pattern, msg.text)
    keyword = match.group(1)
    print(f"{keyword} KEY")
    a = ParseIDTitle(keyword)[0]

    await update.effective_message.delete()

    photo = Path(f"Data/Images/{keyword}")
    await chat.send_photo(photo=open(photo, "rb"))
    if len(a[6]) == 0:
        season = ""
    else:
        season = f"({a[6]})"
    categories = ', '.join(a[3].split(","))
    stR = a[8]
    if stR is None:
        st = "–ù–µ –≤–∫–∞–∑–∞–Ω–∏–π"
    elif len(stR) == 0:
        st = "–ù–µ –≤–∫–∞–∑–∞–Ω–∏–π"
    elif stR == "0":
        st = "‚ö†Ô∏è –û–∑–≤—É—á—É—î—Ç—å—Å—è"
    elif stR == "1":
        st = "‚úÖ –ó–∞–∫—ñ–Ω—á–µ–Ω–∏–π"
    elif stR == "2":
        st = "‚ùî –û–Ω“ë–æ—ó–Ω“ë"
    else:
        st = f"–ù–µ–≤—ñ–¥–æ–º–∏–π({a[8]}"
    if a[14] is None or a[14] == "":
        year = ""
    else:
        year = f"{a[14]}"
    ### –†–ï–ó–ï–†–í–ù–Ü –ú–°–ì
    """msg = (f"<b>–ù–∞–∑–≤–∞:</b> <i>{a[1]} {season}</i>\n"
           f"<b>–°—Ç–∞–Ω: {st}</b>\n"
           f"<b>–ñ–∞–Ω—Ä:</b> <i>{categories}</i>\n"
           f"<b>–ó–∞–¥—ñ—è–Ω—ñ –≤ –æ–∑–≤—É—á–µ–Ω–Ω—ñ:</b> <i>{a[7]}</i>\n"
           f"<b>–û–ø–∏—Å:</b> <i>{a[2]}</i>")
    msg_adm = (f"<b>–ù–∞–∑–≤–∞:</b> <i>{a[1]} {season}</i>\n"
           f"<b>–°—Ç–∞–Ω: {st}</b>\n"               
           f"<b>–ñ–∞–Ω—Ä:</b> <i>{categories}</i>\n"
           f"<b>–ó–∞–¥—ñ—è–Ω—ñ –≤ –æ–∑–≤—É—á–µ–Ω–Ω—ñ:</b> <i>{a[7]}</i>\n"
           f"<b>–û–ø–∏—Å:</b> <i>{a[2]}</i>\n\n"
               f"–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–∞–π—Ç–ª—É: {a[0]}")"""
    # f"<b></b> <i></i>"
    msg = (f"<b>{a[1]} / {a[4]} {season}</b>\n\n"
           f"<b>–°—Ç–∞–Ω: {st}</b>\n\n"
           f"<b>–¢–∏–ø:</b> <i>{a[11]}</i>\n"
            f"<b>–ñ–∞–Ω—Ä:</b> <i>{categories}</i>\n"
           f"<b>–°–µ–∑–æ–Ω:</b> <i>{a[12]} {year}</i>\n"
           f"<b>–û–∑–≤—É—á—É–≤–∞–ª–∏ –∞–Ω—ñ–º–µ:</b> <i>{a[7]}</i>\n"
           f"<b>–ü–µ—Ä–µ–∫–ª–∞–¥:</b> <i>{a[9]}</i>\n"
           f"<b>–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å–µ—Ä:</b> <i>{a[10]}</i>\n\n"
           f"<b>–û–ø–∏—Å:</b> <i>{a[2]}</i>"
           )
    msg_adm = (f"<b>{a[1]} / {a[4]} {season}</b>\n\n"
           f"<b>–°—Ç–∞–Ω: {st}</b>\n\n"
           f"<b>–¢–∏–ø:</b> <i>{a[11]}</i>\n"
            f"<b>–ñ–∞–Ω—Ä:</b> <i>{categories}</i>\n"
           f"<b>–°–µ–∑–æ–Ω:</b> <i>{a[12]} {year}</i>\n"
           f"<b>–û–∑–≤—É—á—É–≤–∞–ª–∏ –∞–Ω—ñ–º–µ:</b> <i>{a[7]}</i>\n"
           f"<b>–ü–µ—Ä–µ–∫–ª–∞–¥:</b> <i>{a[9]}</i>\n"
           f"<b>–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å–µ—Ä:</b> <i>{a[10]}</i>\n\n"
           f"<b>–û–ø–∏—Å:</b> <i>{a[2]}</i>\n\n"
               f"–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–∞–π—Ç–ª—É: {a[0]}")
    if a[13] is None or len(a[13]) == 0:
        trnt = 0
    else:
        trnt = 1
    video = ""
    for x in ParseVLIDVideos(a[5]):
        if x[3] == 1:
            video = x[4]
            break
    if len(a[5]) == 0:
        if UserIsAdmin(user.id):
            await chat.send_message(msg_adm, disable_web_page_preview=True,
                                    parse_mode=telegram.constants.ParseMode.HTML)
        else:
            await chat.send_message(msg, disable_web_page_preview=True, parse_mode=telegram.constants.ParseMode.HTML)
    else:
        if UserIsAdmin(user.id):
            if trnt == 0:
                await chat.send_message(msg_adm, disable_web_page_preview=True,
                                        parse_mode=telegram.constants.ParseMode.HTML,
                                        reply_markup=InlineKeyboardMarkup([
                                            [InlineKeyboardButton(text="–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ—ó",
                                                                  callback_data=f"v_{video}")]
                                        ]))
            else:
                await chat.send_message(msg_adm, disable_web_page_preview=True,
                                        parse_mode=telegram.constants.ParseMode.HTML,
                                        reply_markup=InlineKeyboardMarkup([
                                            [InlineKeyboardButton(text="–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ—ó",
                                                                  callback_data=f"v_{video}")]
                                            ,
                                            [InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç",
                                                                  callback_data=f"sd_{a[0]}")]
                                        ]))
        else:
            if len(a[13]) == 0:
                await chat.send_message(msg, disable_web_page_preview=True,
                                        parse_mode=telegram.constants.ParseMode.HTML,
                                        reply_markup=InlineKeyboardMarkup([
                                            [InlineKeyboardButton(text="–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ—ó",
                                                                  callback_data=f"v_{video}")]
                                        ]))
            else:
                await chat.send_message(msg, disable_web_page_preview=True,
                                        parse_mode=telegram.constants.ParseMode.HTML,
                                        reply_markup=InlineKeyboardMarkup([
                                            [InlineKeyboardButton(text="–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ—ó",
                                                                  callback_data=f"v_{video}")],
                                            [InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç",
                                                                  callback_data=f"sd_{a[0]}")]
                                        ]))


async def delete_titles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if not UserIsAdmin(user.id):
        return ConversationHandler.END
    else:
        await chat.send_message("–í—ñ—Ç–∞—é —É —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞–π—Ç–ª—ñ–≤!", reply_markup=ReplyKeyboardMarkup(k_cancel))
        await chat.send_message(
            " –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–∞–π—Ç–ª —á–µ—Ä–µ–∑ <b>–ü–æ—à—É–∫</b> —ñ —è –π–æ–≥–æ –≤–∏–¥–∞–ª—é.\n–ë—É–¥—å –æ–±–µ—Ä–µ–∂–Ω–∏–π, <u>–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –±—É–¥–µ</u>",
            parse_mode=telegram.constants.ParseMode.HTML, reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ—à—É–∫", switch_inline_query_current_chat="")]
            ]))
        return del_title_s


async def delete_titles1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    pattern = r'^/search_(\w+)$'
    match = re.match(pattern, msg.text)
    keyword = match.group(1)
    a = ParseIDTitle(keyword)[0]
    print(f"{keyword} KEY")
    if DeleteTitleID(keyword):
        await chat.send_message(f"–¢–∞–π—Ç–ª {a[1]} {a[6]} –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        await chat.send_message(f"–û—á—ñ–∫—É—é –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∞–π—Ç–ª –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏: ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
    else:
        await chat.send_message("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞–π—Ç–ª—É")


async def add_title_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if not UserIsAdmin(user.id):
        return ConversationHandler.END
    await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞–π—Ç–ª—ñ–≤")
    await chat.send_message("–û—á—ñ–∫—É—é —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª")


async def Information(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    pth = Path("Data/Other/info.txt")
    a = ParseAllTitles()
    p = ParseAllVideos()
    with open(pth, "r") as file:
        msg = file.read()
    if len(msg) == 0:
        await chat.send_message("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
    else:
        text = msg.replace("ALLSERIES_PH", f"{str(len(p))}")
        text = text.replace("ALLTITLES_PH", f"{str(len(a))}")
        await chat.send_message(text, disable_web_page_preview=True)


async def ReplaceInfo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if UserIsAdmin(user.id):
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞–º—ñ–Ω–∏ —Ç–µ–∫—Å—Ç—É –≤ –≤–∫–ª–∞–¥—Ü—ñ \"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\"",
                                reply_markup=ReplyKeyboardMarkup(k_cancel))
        await chat.send_message("–©–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–¥–∏–Ω –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:")
        await chat.send_message(
            "–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏: ALLTITLES_PH - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Å—ñ—Ö —Ç–∞–π—Ç–ª—ñ–≤ | ALLSERIES_PH - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Å—ñ—Ö —Å–µ—Ä—ñ–π\n"
            "–ü—Ä–∏—Ö–æ–≤–∞–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: [–ö—É–ø–∏—Ç–∏ –∫–∞–≤—É](https://google.com) –ü–û–ö–ò –ù–ï –ü–†–ê–¶–Æ–Ñ\n"
            "–ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –∑–Ω–∞–∫–∏ –±—É–¥—É—Ç—å <b>–≤–∏–¥–∞–ª–µ–Ω—ñ</b> - _ * ` ~", parse_mode=telegram.constants.ParseMode.HTML)
        await chat.send_message("–°—Ç–∞—Ä–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
        oldinf = ReadOtherFile("info.txt")
        if len(oldinf) == 0:
            oldinf = "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –ø—É—Å—Ç–∞"
        await chat.send_message(oldinf)
        return replace_info
    else:
        return ConversationHandler.END


async def ReplaceInfo1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    text = msg.text
    WriteOtherFile("info.txt", msg.text)
    await chat.send_message("–ì–æ—Ç–æ–≤–æ! –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–º—ñ–Ω–µ–Ω–∞!", reply_markup=ReplyKeyboardMarkup(k_admpanel))
    return ConversationHandler.END

async def ReplaceMoney(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if UserIsAdmin(user.id):
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞–º—ñ–Ω–∏ —Ç–µ–∫—Å—Ç—É –≤ –≤–∫–ª–∞–¥—Ü—ñ \"–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å\"",
                                reply_markup=ReplyKeyboardMarkup(k_cancel))
        await chat.send_message("–©–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:")
        await chat.send_message("–ü—Ä–∏–º—ñ—Ç–∫–∞: —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑–∞ HTML")
        await chat.send_message("–°—Ç–∞—Ä–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
        oldinf = ReadOtherFile(donatefile)
        if len(oldinf) == 0:
            oldinf = "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –ø—É—Å—Ç–∞"
        await chat.send_message(oldinf)
        return rmoney
    else:
        return ConversationHandler.END


async def ReplaceMoney1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    text = msg.text
    WriteOtherFile(donatefile, msg.text)
    await chat.send_message("–ì–æ—Ç–æ–≤–æ! –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–º—ñ–Ω–µ–Ω–∞!", reply_markup=ReplyKeyboardMarkup(k_admpanel))
    return ConversationHandler.END
async def TitleList(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if UserIsAdmin(user.id):
        a = ParseAllTitles()
        if len(a) == 0:
            await chat.send_message("–í –º–æ—ó–π –ë–î –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ç–∞–π—Ç–ª–∏.")
        else:
            msg = "–í—Å—ñ —Ç–∞–π—Ç–ª–∏ –≤ –ë–î:\n\n"
            mv = 0
            for x in a:
                mv = mv + 1
                if len(x[6]) == 0:
                    season = ""
                else:
                    season = f"({x[6]})"
                if len(x[5]) == 0:
                    con = "–í—ñ–¥—Å—É—Ç–Ω—è"
                else:
                    con = x[5]

                msg = msg + f"{mv}. {x[1]} {season} | ID: {x[0]} | –ü—Ä–∏–≤'—è–∑–∫–∞: {con}\n"
            await chat.send_message(msg)


async def FileID(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("yes")
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if archiveID == chat.id:
        if chat.type == "supergroup":
            await msg.reply_text(f"Name: {msg.video.file_name}")
            await msg.reply_text(msg.video.file_id)


async def AddVideoList(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if UserIsAdmin(user.id):
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–µ–æ –¥–ª—è –ø–ª–µ—î—Ä–∞.")
        await chat.send_message("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –¥–∞–Ω–Ω—ñ –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\nFileID –ù–∞–∑–≤–∞ –µ–ø—ñ–∑–æ–¥—É (—á–∞—Å—Ç–∏–Ω–∞)\n\n–ü—Ä–∏–∫–ª–∞–¥:\n\n"
                                "HIOio1b19plsdaj31 –õ—ñ–∫–∞—Ä–Ω—è\n"
                                "DAoijfa33fqFAf –ú–æ–Ω–æ–ª–æ–≥ –º–µ—Ä—Ü—è\n"
                                "gassshFEW@fesd –ú–µ—Ä—Ç–≤–∞ —Ç–∏—à–∏–Ω–∞ (1/2)\n"
                                "rfasdASsfffSfd –ú–µ—Ä—Ç–≤–∞ —Ç–∏—à–∏–Ω–∞ (2/2)", reply_markup=ReplyKeyboardMarkup(k_cancel))
        await chat.send_message("–ü—Ä–∏–º—ñ—Ç–∫–∞: –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –µ–ø—ñ–∑–æ–¥—É –≤—ñ–¥—Å—É—Ç–Ω—è, –∑–∞–º—ñ—Å—Ç—å –Ω–µ—ó –Ω–∞–ø–∏—à–∏ 0")
        return add_video


async def AddVideoList1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    x1 = 0
    x2 = 0
    if x1 == 0:
        mv = 1
        vrpostID = VTotalRandom()
        for x in msg.text.split("\n"):
            x = x.split(" ")
            if CheckFLIDUse(x[0]):
                await chat.send_message(
                    f"FileID: {x[0]}\n–í–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è! –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–∏—Å–∫–∏ –∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ FileID.")
                await chat.send_message("–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω–∞–∫—à–∏–π FileID —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ")
                x2 = 1
                break
            InitVideo(vrpostID, x[0])
            UpdateVideo(x[0], vrpostID, "Episode", mv)
            Capt = " ".join(x).split(" ")
            Capt[0] = ""
            Capt = " ".join(Capt)
            print(f"CAPT {Capt}")
            if str(Capt) == " 0":
                Capt = ""
            UpdateVideo(x[0], vrpostID, "CaptionText", Capt)
            UpdateVideo(x[0], vrpostID, "SFileID", VSTotalRandom())
            mv = mv + 1
        if x2 == 0:
            await chat.send_message(f"–ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞! –°–ø–∏—Å–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ! VideoListID: {vrpostID}",
                                    reply_markup=ReplyKeyboardMarkup(k_admpanel))
            return ConversationHandler.END


async def VideoList(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user

    if UserIsAdmin(user.id):
        UIDs = []
        msg = "–°–ø–∏—Å–∫–∏ –≤—ñ–¥–µ–æ–ø–ª–µ—î—Ä–∞:\n\n"
        mv = 1
        pv = ParseAllVideos()
        pt = ParseAllTitles()
        conx = 0
        for x in pv:
            UIDs.extend([x[0]])
        UIDs = list(set(UIDs))
        for x in UIDs:
            for x1 in pt:
                print(x1[5])
                if x1[5] == x:
                    conx = x1[1]
                    break
                else:
                    conx = 0
            if conx == 0:
                con = "–í—ñ–¥—Å—É—Ç–Ω—è"
            else:
                con = conx
            msg += f"{mv}. VLID: {x} | –ü—Ä–∏–≤'—è–∑–∫–∞: {con}\n/series_{x}\n"
            mv += 1
        await chat.send_message(msg)


async def SeriesList(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    pattern = r'^/series_(\w+)$'
    match = re.match(pattern, msg.text)
    VLID = match.group(1)
    print(f"{VLID} VLID KEY")
    if not CheckListVILD(VLID):
        print("FALSE VLID")
        await chat.send_message("–Ø —Ç–µ–±–µ –Ω–µ —Ä–æ–∑—É–º—ñ—é. –©–æ —Ç–∏ –º–∞—î—à –Ω–∞ —É–≤–∞–∑—ñ?")
        return
    pat = ParseAllTitles()
    con = ""
    for x in pat:
        if x[5] == VLID:
            con = "üì∫ " + x[1]
            break
        else:
            con = "–í—ñ–¥—Å—É—Ç–Ω—è –ø—Ä–∏–≤'—è–∑–∫–∞ –¥–æ —Ç–∞–π—Ç–ª—É, –Ω–∞–∑–≤–∞ –Ω–µ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∞."
    series = sortS(ParseVLIDVideos(VLID))
    msg1 = f"{con}\n\n"
    for x in series:
        if len(x[2]) == 0:
            capt = ""
        else:
            capt = " - " + x[2]
        msg1 += f"‚ñ∂Ô∏è–ï–ø—ñ–∑–æ–¥ {x[3]}{capt}\n–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: /video_{x[4]}\n\n"
    await chat.send_message(msg1)


async def DeleteVideoList(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if UserIsAdmin(user.id):
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–µ—î—Ä–∞.")
        await chat.send_message("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å VLID: ")
        UIDs = []
        msg = "–°–ø–∏—Å–∫–∏ –≤—ñ–¥–µ–æ–ø–ª–µ—î—Ä–∞:\n\n"
        mv = 1
        pv = ParseAllVideos()
        pt = ParseAllTitles()
        for x in pv:
            UIDs.extend([x[0]])
        UIDs = list(set(UIDs))
        conx = 0
        for x in UIDs:
            for x1 in pt:
                if x == x1[5]:
                    conx = x1[1]
                    break
                else:
                    conx = 0
            if conx == 0:
                con = "–í—ñ–¥—Å—É—Ç–Ω—è"
            else:
                con = conx
            msg += f"{mv}. VLID: {x} | –ü—Ä–∏–≤'—è–∑–∫–∞: {con}\n"
            mv += 1
        await chat.send_message(
            "–ü—Ä–∏–º—ñ—Ç–∫–∞: –Ø–∫—â–æ –≤–∏ –≤–∏–¥–∞–ª—è—î—Ç–µ —Å–ø–∏—Å–æ–∫, —è–∫–∏–π –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ —Ç–∞–π—Ç–ª—É, —Ç–æ–¥—ñ –ø—Ä–∏–≤'—è–∑–∫–∞ –±—É–¥–µ –∞–Ω—É–ª—å–æ–≤–∞–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup(k_cancel))
        await chat.send_message(msg)
        return del_vl
    else:
        return ConversationHandler.END


async def DeleteVideoList1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if len(ParseVLIDVideos(msg.text)) == 0:
        await chat.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π VLID, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
    else:
        if DeleteVLID(msg.text):
            await chat.send_message("–°–ø–∏—Å–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", reply_markup=ReplyKeyboardMarkup(k_player))
        else:
            await chat.send_message("–ü–û–ú–ò–õ–ö–ê: –°–ø–∏—Å–æ–∫ –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ!", reply_markup=ReplyKeyboardMarkup(k_player))
        return ConversationHandler.END


async def CallbackQuery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    query = update.callback_query
    await query.answer()
    qd = query.data
    print("+")
    print(qd)
    if qd.startswith("s_"):
        print("+")
        VLID = qd.split("_")[1]
        print(f"{VLID} VLID KEY")
        if not CheckListVILD(VLID):
            print("FALSE VLID")
            await chat.send_message("VLID –≤–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
            return
        pat = ParseAllTitles()
        con = ""
        for x in pat:
            if x[5] == VLID:
                con = "üì∫ " + x[1]
                break
            else:
                con = "–í—ñ–¥—Å—É—Ç–Ω—è –ø—Ä–∏–≤'—è–∑–∫–∞ –¥–æ —Ç–∞–π—Ç–ª—É, –Ω–∞–∑–≤–∞ –Ω–µ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∞."

        series = sortS(ParseVLIDVideos(VLID))
        msg1 = f"{con}\n\n"

        for x in series:
            if len(x[2]) == 0:
                name = ""
            else:
                name = " - " + x[2]
            msg1 += f"‚ñ∂Ô∏è–ï–ø—ñ–∑–æ–¥ {x[3]}{name}\n–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: /video_{x[4]}\n\n"
        await chat.send_message(msg1)
    if qd.startswith("cs_"):
        data = qd.split("_")
        pt = ParseIDTitle(data[1])[0]
        if not pt[8] == str(data[2]):
            UpdateTitles(data[1], "State", data[2])
            oldmsgid = query.message.id
            if data[2] == "0":
                st = "‚ö†Ô∏è –û–∑–≤—É—á—É—î—Ç—å—Å—è"
            elif data[2] == "1":
                st = "‚úÖ –ó–∞–∫—ñ–Ω—á–µ–Ω–∏–π"
            elif data[2] == "2":
                st = "‚ùî –û–Ω“ë–æ—ó–Ω“ë"
            else:
                st = f"–ù–µ–≤—ñ–¥–æ–º–∏–π({data[2]})"
            msg = ("–¢–∞–π—Ç–ª —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.\n\n"
                   f"–ù–∞–∑–≤–∞: {pt[1]} {pt[6]}\n–°—Ç–∞–Ω: {st}")
            await context.bot.edit_message_text(chat_id=user.id, message_id=oldmsgid, text=msg)
    if qd == "rtm":
        await query.message.delete()
        await chat.send_message("–í—ñ—Ç–∞—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é!")
        if UserIsAdmin(user.id):
            await chat.send_message("–ß–æ–≥–æ –±–∞–∂–∞—î—à?", reply_markup=ReplyKeyboardMarkup(k_start_adm))
        else:
            await chat.send_message("–ß–æ–≥–æ –±–∞–∂–∞—î—à?", reply_markup=ReplyKeyboardMarkup(k_start))
    if qd == "restartmenu":
        await query.message.delete()
        p = Path("Data/Other/inline_additional_menu.png")
        await chat.send_photo(photo=open(p, "rb"), reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–†–æ–∑–∫–ª–∞–¥ –≤–∏—Ö–æ–¥—É —Å–µ—Ä—ñ–π", callback_data="calendar")],
            [InlineKeyboardButton("–í–∏–ø–∞–¥–∫–æ–≤–µ –∞–Ω—ñ–º–µ", callback_data="ra")],
            [InlineKeyboardButton(text="–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å", callback_data="na_revo"),
             InlineKeyboardButton(text="–ó–≤'—è–∑–æ–∫ –∑ –Ω–∞–º–∏", callback_data="calltogod")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="rtm")]
        ]))
    if qd == "calendar":
        datan = date.datetime.now().strftime("%d.%m.%y")
        msg = f"üóì –†–æ–∑–∫–ª–∞–¥ –≤–∏—Ö–æ–¥—É —Å–µ—Ä—ñ–π —Å—Ç–∞–Ω–æ–º –Ω–∞ {datan}:\n\n"
        for x in GenCalendar():
            msg += x
        await query.message.delete()
        await chat.send_message(msg, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="restartmenu")]
        ]))
    if qd == "ra":
        chat = update.effective_chat
        msg = update.effective_message
        user = update.effective_user
        allt = ParseAllTitles()

        if len(allt) == 0:
            await chat.send_message("–í –º–æ—ó–π –±–∞–∑—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ç–∞–π—Ç–ª–∏.")
            return
        if len(allt) == 1:
            keywordd = allt[0][0]
        else:
            keywordd = allt[random.randrange(1, stop=len(allt))+1][0]

        print(f"{keywordd} KEY")
        a = ParseIDTitle(keywordd)[0]

        photo = Path(f"Data/Images/{keywordd}")
        await chat.send_photo(photo=open(photo, "rb"))
        if len(a[6]) == 0:
            season = ""
        else:
            season = f"({a[6]})"
        categories = ', '.join(a[3].split(","))
        stR = a[8]
        if stR is None:
            st = "–ù–µ –≤–∫–∞–∑–∞–Ω–∏–π"
        elif len(stR) == 0:
            st = "–ù–µ –≤–∫–∞–∑–∞–Ω–∏–π"
        elif stR == "0":
            st = "‚ö†Ô∏è –û–∑–≤—É—á—É—î—Ç—å—Å—è"
        elif stR == "1":
            st = "‚úÖ –ó–∞–∫—ñ–Ω—á–µ–Ω–∏–π"
        elif stR == "2":
            st = "‚ùî –û–Ω“ë–æ—ó–Ω“ë"
        else:
            st = f"–ù–µ–≤—ñ–¥–æ–º–∏–π({a[8]}"
        ### –†–ï–ó–ï–†–í–ù–Ü –ú–°–ì
        """msg = (f"<b>–ù–∞–∑–≤–∞:</b> <i>{a[1]} {season}</i>\n"
               f"<b>–°—Ç–∞–Ω: {st}</b>\n"
               f"<b>–ñ–∞–Ω—Ä:</b> <i>{categories}</i>\n"
               f"<b>–ó–∞–¥—ñ—è–Ω—ñ –≤ –æ–∑–≤—É—á–µ–Ω–Ω—ñ:</b> <i>{a[7]}</i>\n"
               f"<b>–û–ø–∏—Å:</b> <i>{a[2]}</i>")
        msg_adm = (f"<b>–ù–∞–∑–≤–∞:</b> <i>{a[1]} {season}</i>\n"
               f"<b>–°—Ç–∞–Ω: {st}</b>\n"               
               f"<b>–ñ–∞–Ω—Ä:</b> <i>{categories}</i>\n"
               f"<b>–ó–∞–¥—ñ—è–Ω—ñ –≤ –æ–∑–≤—É—á–µ–Ω–Ω—ñ:</b> <i>{a[7]}</i>\n"
               f"<b>–û–ø–∏—Å:</b> <i>{a[2]}</i>\n\n"
                   f"–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–∞–π—Ç–ª—É: {a[0]}")"""
        if a[14] is None or a[14] == "":
            year = ""
        else:
            year = f"{a[14]}"
        msg = (f"<b>{a[1]} / {a[4]} {season}</b>\n\n"
               f"<b>–°—Ç–∞–Ω: {st}</b>\n\n"
               f"<b>–¢–∏–ø:</b> <i>{a[11]}</i>\n"
               f"<b>–ñ–∞–Ω—Ä:</b> <i>{categories}</i>\n"
               f"<b>–°–µ–∑–æ–Ω:</b> <i>{a[12]} {year}</i>\n"
               f"<b>–û–∑–≤—É—á—É–≤–∞–ª–∏ –∞–Ω—ñ–º–µ:</b> <i>{a[7]}</i>\n"
               f"<b>–ü–µ—Ä–µ–∫–ª–∞–¥:</b> <i>{a[9]}</i>\n"
               f"<b>–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å–µ—Ä:</b> <i>{a[10]}</i>\n\n"
               f"<b>–û–ø–∏—Å:</b> <i>{a[2]}</i>"
               )
        msg_adm = (f"<b>{a[1]} / {a[4]} {season}</b>\n\n"
                   f"<b>–°—Ç–∞–Ω: {st}</b>\n\n"
                   f"<b>–¢–∏–ø:</b> <i>{a[11]}</i>\n"
                   f"<b>–ñ–∞–Ω—Ä:</b> <i>{categories}</i>\n"
                   f"<b>–°–µ–∑–æ–Ω:</b> <i>{a[12]} {year}</i>\n"
                   f"<b>–û–∑–≤—É—á—É–≤–∞–ª–∏ –∞–Ω—ñ–º–µ:</b> <i>{a[7]}</i>\n"
                   f"<b>–ü–µ—Ä–µ–∫–ª–∞–¥:</b> <i>{a[9]}</i>\n"
                   f"<b>–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å–µ—Ä:</b> <i>{a[10]}</i>\n\n"
                   f"<b>–û–ø–∏—Å:</b> <i>{a[2]}</i>\n\n"
                   f"–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–∞–π—Ç–ª—É: {a[0]}")
        if a[13] is None or len(a[13]) == 0:
            trnt = 0
        else:
            trnt = 1
        video = ""
        for x in ParseVLIDVideos(a[5]):
            if x[3] == 1:
                video = x[4]
                break
        if len(a[5]) == 0:
            if UserIsAdmin(user.id):
                await chat.send_message(msg_adm, disable_web_page_preview=True,
                                        parse_mode=telegram.constants.ParseMode.HTML)
            else:
                await chat.send_message(msg, disable_web_page_preview=True,
                                        parse_mode=telegram.constants.ParseMode.HTML)
        else:
            if UserIsAdmin(user.id):
                if trnt == 0:
                    await chat.send_message(msg_adm, disable_web_page_preview=True,
                                            parse_mode=telegram.constants.ParseMode.HTML,
                                            reply_markup=InlineKeyboardMarkup([
                                                [InlineKeyboardButton(text="–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ—ó",
                                                                      callback_data=f"v_{video}")]
                                            ]))
                else:
                    await chat.send_message(msg_adm, disable_web_page_preview=True,
                                            parse_mode=telegram.constants.ParseMode.HTML,
                                            reply_markup=InlineKeyboardMarkup([
                                                [InlineKeyboardButton(text="–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ—ó",
                                                                      callback_data=f"v_{video}")]
                                                ,
                                                [InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç",
                                                                      callback_data=f"sd_{a[0]}")]
                                            ]))
            else:
                if len(a[13]) == 0:
                    await chat.send_message(msg, disable_web_page_preview=True,
                                            parse_mode=telegram.constants.ParseMode.HTML,
                                            reply_markup=InlineKeyboardMarkup([
                                                [InlineKeyboardButton(text="–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ—ó",
                                                                      callback_data=f"v_{video}")]
                                            ]))
                else:
                    await chat.send_message(msg, disable_web_page_preview=True,
                                            parse_mode=telegram.constants.ParseMode.HTML,
                                            reply_markup=InlineKeyboardMarkup([
                                                [InlineKeyboardButton(text="–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ—ó",
                                                                      callback_data=f"v_{video}")],
                                                [InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç",
                                                                      callback_data=f"sd_{a[0]}")]
                                            ]))
    if qd.startswith("sd_"):
        arg = qd.split("_")[1]
        a = ParseIDTitle(arg)[0]
        p = Path(f"Data/Torrents/{a[13]}")
        dp = Path(f"Data/Torrents/{a[13]}.torrent")
        if trntexists(dp):
            await chat.send_document(open(dp, "rb"),caption=f"–¢–æ—Ä–µ–Ω—Ç —Ñ–∞–π–ª –Ω–∞ —Ç–∞–π—Ç–ª: {a[1]}", parse_mode=telegram.constants.ParseMode.HTML)
        else:
            await chat.send_message("–ü–æ–º–∏–ª–∫–∞, —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–æ—Ä–µ–Ω—Ç —Ñ–∞–π–ª—É –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–µ. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å @Quality2Length")
    if qd.startswith("cngseries_"):
        arg = qd.split("_")[1]
        a = ParseSFLIDVideos(arg)[0]
        pat = ParseAllTitles()
        con = ""
        season = ""
        for x in pat:
            if x[5] == a[0]:
                if not len(x[6]) == 0:
                    season = f"| {x[6]}"
                con = f"{x[1]} {season}\n{x[4]} "
                break
            else:
                con = "–í—ñ–¥—Å—É—Ç–Ω—è –ø—Ä–∏–≤'—è–∑–∫–∞ –¥–æ —Ç–∞–π—Ç–ª—É, –Ω–∞–∑–≤–∞ –Ω–µ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∞."
        #print(a)
        if len(a[2]) == 0:
            capt = ""
        else:
            capt = " - " + a[2]
        msg1 = f"üñ• {con}\n\n–ï–ø—ñ–∑–æ–¥ {a[3]}{capt}"
        await query.message.delete()
        btns = GenVideoButtons(arg)
        await chat.send_video(video=a[1], caption=msg1, reply_markup=InlineKeyboardMarkup(btns))
    if qd.startswith("v_"):
        chat = update.effective_chat
        SFileID = qd.split("_")[1]
        vid = ParseSFLIDVideos(SFileID)[0]
        pat = ParseAllTitles()
        con = ""
        season = ""
        FileID = ParseSFLIDVideos(SFileID)[0][1]
        for x in pat:
            if x[5] == vid[0]:
                if not len(x[6]) == 0:
                    season = f"| {x[6]}"
                con = f"{x[1]} {season}\n{x[4]} "
                break
            else:
                con = "–í—ñ–¥—Å—É—Ç–Ω—è –ø—Ä–∏–≤'—è–∑–∫–∞ –¥–æ —Ç–∞–π—Ç–ª—É, –Ω–∞–∑–≤–∞ –Ω–µ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∞."
        if len(vid[2]) == 0:
            capt = ""
        else:
            capt = " - " + vid[2]
        msg1 = f"üñ• {con}\n\n–ï–ø—ñ–∑–æ–¥ {vid[3]}{capt}"
        btns = GenVideoButtons(SFileID)
        await chat.send_video(video=FileID, caption=msg1, reply_markup=InlineKeyboardMarkup(btns))
    if qd == "na_revo":
        chat = update.effective_chat
        pth = Path(f"Data/Other/{donatefile}")
        with open(pth, "r") as file:
            msg = file.read()
        await query.message.delete()
        if len(msg) == 0:
            await chat.send_message("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="restartmenu")]]))
        else:
            await chat.send_message(msg,parse_mode=telegram.constants.ParseMode.HTML, disable_web_page_preview=True, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="restartmenu")]]))
    if qd == "calltogod":
        await query.message.delete()
        await chat.send_message("–ú–∞—î—à —ñ–¥–µ—ó, –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —á–∏ –ø—Ä–∏—Ç–µ–Ω–∑—ñ—ó?\n\n–ü–∏—à–∏ @pan_kioto_sup —ñ —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å!",reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="restartmenu")]]))



async def SendVideo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("+")
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    SFileID = msg.text.split("_")[1]
    await msg.delete()
    vid = ParseSFLIDVideos(SFileID)[0]
    pat = ParseAllTitles()
    con = ""
    season = ""
    FileID = ParseSFLIDVideos(SFileID)[0][1]
    for x in pat:
        if x[5] == vid[0]:
            if not len(x[6]) == 0:
                season = f"| {x[6]}"
            con = f"{x[1]} {season}\n{x[4]} "
            break
        else:
            con = "–í—ñ–¥—Å—É—Ç–Ω—è –ø—Ä–∏–≤'—è–∑–∫–∞ –¥–æ —Ç–∞–π—Ç–ª—É, –Ω–∞–∑–≤–∞ –Ω–µ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∞."
    if len(vid[2]) == 0:
        capt = ""
    else:
        capt = " - " + vid[2]
    msg1 = f"üñ• {con}\n\n–ï–ø—ñ–∑–æ–¥ {vid[3]}{capt}"
    btns = GenVideoButtons(SFileID)
    await chat.send_video(video=FileID, caption=msg1, reply_markup=InlineKeyboardMarkup(btns))


async def UpdateTitleVLID(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if UserIsAdmin(user.id):
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–º—ñ–Ω–∏ VLID –≤ —Ç–∞–π—Ç–ª—ñ–≤")
        await chat.send_message("–©–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ç–∞–π—Ç–ª —á–µ—Ä–µ–∑ @pankioto_bot –ù–∞–∑–≤–∞ —Ç–∞–π—Ç–ª—É",
                                reply_markup=ReplyKeyboardMarkup(k_cancel))
        return vlid_title_change
    else:
        return ConversationHandler.END


async def UpdateTitleVLID1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if len(msg.text.split("_")) <= 1:
        await chat.send_message("–©–æ—Å—å –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
    else:
        ID = msg.text.split("_")[1]
        pt = ParseIDTitle(ID)
        if len(pt) == 0:
            await chat.send_message("–Ø –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —Ü–µ–π —Ç–∞–π—Ç–ª, –ø–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        else:
            AddToTemp(user.id, ID)
            if not len(pt[0][5]) == 0:
                con = pt[0][5]
            else:
                con = "–í—ñ–¥—Å—É—Ç–Ω—è"
            if len(pt[0][6]) == 0:
                season = ""
            else:
                season = pt[0][6]
            await chat.send_message(f"–¢–∞–π—Ç–ª: {pt[0][1]} {season}\n–ü—Ä–∏–≤'—è–∑–∫–∞: {con}")
            await chat.send_message("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω–æ–≤–∏–π VLID, –¥–æ —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ —Ç–∞–π—Ç–ª:")

            UIDs = []
            msg = "–°–ø–∏—Å–∫–∏ –≤—ñ–¥–µ–æ–ø–ª–µ—î—Ä–∞:\n\n"
            mv = 1
            pv = ParseAllVideos()
            pt = ParseAllTitles()
            for x in pv:
                UIDs.extend([x[0]])
            UIDs = list(set(UIDs))
            conx = 0
            for x in UIDs:
                for x1 in pt:
                    if x == x1[5]:
                        conx = x1[1]
                        break
                    else:
                        conx = 0
                if conx == 0:
                    con = "–í—ñ–¥—Å—É—Ç–Ω—è"
                else:
                    con = conx
                msg += f"{mv}. VLID: {x} | –ü—Ä–∏–≤'—è–∑–∫–∞: {con}\n"
                mv += 1
            await chat.send_message(msg)

            return vlid_title_change1


async def UpdateTitleVLID2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if not CheckListVILD(msg.text):
        await chat.send_message("–°–ø–∏—Å–∫—É –∑–∞ —Ç–∞–∫–∏–º VLID –Ω–µ —ñ—Å–Ω—É—î, –ø–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
    else:
        IDVLID = CheckListConVILD(msg.text)
        tid = UserTempTitleID(user.id)
        if not IDVLID:

            UpdateTitles(tid, "VideoPost", msg.text)
            t = ParseIDTitle(tid)[0]
            await chat.send_message(f"VLID —Ç–∞–π—Ç–ª—É: \"{t[1]}\" —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.",
                                    reply_markup=ReplyKeyboardMarkup(k_admpanel))
        else:
            await chat.send_message("–¶–µ–π —Å–ø–∏—Å–æ–∫ –≤–∂–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π, –ø–µ—Ä–µ–ø—Ä–∏–≤'—è–∑—É—é.")
            UpdateTitles(IDVLID, "VideoPost", "")
            UpdateTitles(tid, "VideoPost", msg.text)
            await chat.send_message("–°–ø–∏—Å–æ–∫ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–ø—Ä–∏–≤'—è–∑–∞–Ω–æ –¥–æ –Ω–æ–≤–æ–≥–æ —Ç–∞–π—Ç–ª—É.",
                                    reply_markup=ReplyKeyboardMarkup(k_player))
        RemoveTempUser(user.id)
        return ConversationHandler.END


async def UpdateVideoList(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    if UserIsAdmin(user.id):
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–ª–µ—î—Ä–∞.")
        await chat.send_message("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ VLID:", reply_markup=ReplyKeyboardMarkup(k_cancel))

        UIDs = []
        msg = "–°–ø–∏—Å–∫–∏ –≤—ñ–¥–µ–æ–ø–ª–µ—î—Ä–∞:\n\n"
        mv = 1
        pv = ParseAllVideos()
        pt = ParseAllTitles()
        for x in pv:
            UIDs.extend([x[0]])
        UIDs = list(set(UIDs))
        conx = 0
        for x in UIDs:
            for x1 in pt:
                if x == x1[5]:
                    conx = x1[1]
                    break
                else:
                    conx = 0
            if conx == 0:
                con = "–í—ñ–¥—Å—É—Ç–Ω—è"
            else:
                con = conx
            msg += f"{mv}. VLID: {x} | –ü—Ä–∏–≤'—è–∑–∫–∞: {con}\n"
            mv += 1
        await chat.send_message(msg)
        return vlid_update
    else:
        return ConversationHandler.END


async def UpdateVideoList1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    msg = update.effective_message
    if not CheckListVILD(msg.text):
        await chat.send_message("–¢–∞–∫–æ–≥–æ —Å–ø–∏—Å–∫—É –Ω–µ —ñ—Å–Ω—É—î, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
        await chat.send_message("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ VLID:")
    else:
        AddToValue(user.id, msg.text)
        print(f"TEMP: {temp_user_values}")
        await chat.send_message("VLID –ø—Ä–∏–π–Ω—è—Ç–æ.")
        await chat.send_message("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –¥–∞–Ω–Ω—ñ –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\nFileID –ù–∞–∑–≤–∞ –µ–ø—ñ–∑–æ–¥—É (—á–∞—Å—Ç–∏–Ω–∞)\n\n–ü—Ä–∏–∫–ª–∞–¥:\n\n"
                                "HIOio1b19plsdaj31 –õ—ñ–∫–∞—Ä–Ω—è\n"
                                "DAoijfa33fqFAf –ú–æ–Ω–æ–ª–æ–≥ –º–µ—Ä—Ü—è\n"
                                "gassshFEW@fesd –ú–µ—Ä—Ç–≤–∞ —Ç–∏—à–∏–Ω–∞ (1/2)\n"
                                "rfasdASsfffSfd –ú–µ—Ä—Ç–≤–∞ —Ç–∏—à–∏–Ω–∞ (2/2)", reply_markup=ReplyKeyboardMarkup(k_cancel))
        await chat.send_message("–ü—Ä–∏–º—ñ—Ç–∫–∞: –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –µ–ø—ñ–∑–æ–¥—É –≤—ñ–¥—Å—É—Ç–Ω—è, –∑–∞–º—ñ—Å—Ç—å –Ω–µ—ó –Ω–∞–ø–∏—à–∏ 0")
        await chat.send_message("–°—Ç–∞—Ä–∏–π VideoList:")
        pv = ParseVLIDVideos(msg.text)
        oldvl = []
        for x in pv:
            print(x)
            if len(x[2]) == 0:
                capt = " 0"
            else:
                capt = f" {x[2]}"
            oldvl.extend([f"{x[1]}{capt}"])
        msg = '\n'.join(oldvl)
        await chat.send_message(msg)
        return vlid_update1


async def UpdateVideoList2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    msg = update.effective_message
    x1 = 0
    x2 = 0
    mv = 1
    vrpostID = UserTempValue(user.id)
    contid = CheckListConVILD(vrpostID)
    for x in msg.text.split("\n"):
        x = x.split(" ")
        """if CheckFLIDUse(x[0]):
            await chat.send_message(
                f"FileID: {x[0]}\n–í–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è! –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–∏—Å–∫–∏ –∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ FileID.")
            await chat.send_message("–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω–∞–∫—à–∏–π FileID —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ")
            x2 = 1
            break"""
        if mv == 1:
            DeleteVLID(vrpostID)
            print("DELETEVLID UPDATE")
        InitVideo(vrpostID, x[0])
        UpdateVideo(x[0], vrpostID, "Episode", mv)
        Capt = " ".join(x).split(" ")
        Capt[0] = ""
        Capt = " ".join(Capt)
        print(f"CAPT {Capt}")
        if str(Capt) == " 0":
            Capt = ""
        UpdateVideo(x[0], vrpostID, "CaptionText", Capt)
        UpdateVideo(x[0], vrpostID, "SFileID", VSTotalRandom())
        mv = mv + 1
    if x2 == 0:
        await chat.send_message(f"–ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞! –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! VideoListID: {vrpostID}",
                                reply_markup=ReplyKeyboardMarkup(k_player))
        UpdateTitles(contid, "VideoPost", vrpostID)
        RemoveValueUser(user.id)
        return ConversationHandler.END


async def ChangeState(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if not UserIsAdmin(user.id):
        return ConversationHandler.END
    else:
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –∞–Ω—ñ–º–µ.")
        await chat.send_message("–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∞–Ω—ñ–º–µ —á–µ—Ä–µ–∑ <code>@pankioto_bot</code>",
                                parse_mode=telegram.constants.ParseMode.HTML,
                                reply_markup=ReplyKeyboardMarkup(k_cancel))
        return c_s


async def ChangeState1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if len(msg.text.split("_")) <= 1:
        await chat.send_message("–©–æ—Å—å –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
    else:
        ID = msg.text.split("_")[1]
        pt = ParseIDTitle(ID)
        print(pt)
        if len(pt) == 0:
            await chat.send_message("–Ø –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —Ü–µ–π —Ç–∞–π—Ç–ª, –ø–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        else:
            if not len(pt[0][5]) == 0:
                con = pt[0][5]
            else:
                con = "–í—ñ–¥—Å—É—Ç–Ω—è"
            if len(pt[0][6]) == 0:
                season = ""
            else:
                season = pt[0][6]
            if pt[0][8] is None:
                st = "–ù–µ –≤–∫–∞–∑–∞–Ω–∏–π"
            elif len(pt[0][8]) == 0:
                st = "–í—ñ–¥—Å—É—Ç–Ω—ñ–π"
            elif pt[0][8] == "0":
                st = "‚ö†Ô∏è –û–∑–≤—É—á—É—î—Ç—å—Å—è"
            elif pt[0][8] == "1":
                st = "‚úÖ –ó–∞–∫—ñ–Ω—á–µ–Ω–∏–π"
            elif pt[0][8] == "2":
                st = "‚ùî –û–Ω“ë–æ—ó–Ω“ë"
            else:
                st = f"–ù–µ–≤—ñ–¥–æ–º–∏–π({pt[0][8]}"
            await chat.send_message("–ù–∞–¥—Å–∏–ª–∞—é –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–æ–º:", reply_markup=ReplyKeyboardMarkup(k_admpanel))
            amsg = await chat.send_message(
                f"–¢–∞–π—Ç–ª: {pt[0][1]} {season}\n–ü—Ä–∏–≤'—è–∑–∫–∞: {con}\n–°—Ç–∞–Ω: {st}\n–í–∏–±–µ—Ä–∏ —Å—Ç–∞–Ω, —è–∫–∏–π —Ç–∏ —Ö–æ—á–µ—à –ø—Ä–∏—Å–≤–æ—ó—Ç–∏:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ó–∞–∫—ñ–Ω—á–µ–Ω–∏–π", callback_data=f"cs_{ID}_1")],
                    [InlineKeyboardButton("‚ö†Ô∏è –û–∑–≤—É—á—É—î—Ç—å—Å—è", callback_data=f"cs_{ID}_0")],
                    [InlineKeyboardButton("‚ùî –û–Ω“ë–æ—ó–Ω“ë", callback_data=f"cs_{ID}_2")]
                ]))
            print(amsg.message_id)
            return ConversationHandler.END

async def ChangeCalendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    if not UserIsAdmin(user.id):
        return ConversationHandler.END
    else:
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–º—ñ–Ω–∏ –ø–æ–∑–∏—Ü—ñ–π —Ä–æ–∑–∫–ª–∞–¥—É",reply_markup=ReplyKeyboardMarkup(k_cancel))
        await chat.send_message("–í–∏–±–µ—Ä–∏ –¥–µ–Ω—å —Ç–∏–∂–Ω—è, —è–∫–∏–π –±–∞–∂–∞—î—à —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:",reply_markup=InlineKeyboardMarkup(GenCalendarInlineButtons()))
    return ccng
async def ChangeCalendarHandler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data.startswith("ah_cc_"):
        ud = query.data.replace("ah_", "")
        ud = ud.split('_')[1]
        print(f'UD {ud}')
        wdd = int(ud) - int(datetime.datetime.now().strftime("%w"))
        print(f"WWD: {wdd}")
        if wdd < 0:
            am = await update.effective_chat.send_message("–¢–∏ –Ω–µ –º–æ–∂–µ—à —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º–∏–Ω—É–ª–∏–π –¥–µ–Ω—å! –í–∏–±–µ—Ä–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å!")
            await asyncio.sleep(2)
            await am.delete()
        else:
            context.user_data['CC'] = query.data.split('_')[2]
            await context.bot.edit_message_text(f"–ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è \"{GetWeekDay(int(ud))}\":\n–ü—Ä–∏–º—ñ—Ç–∫–∞: –Ø–∫—â–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 0, —Ç–∏ –æ—á–∏—Å—Ç–∏—à –ø–æ–∑–∏—Ü—ñ—é.", chat_id=update.effective_user.id, message_id=query.message.id)
            return ccng1
async def ChangeCalendar1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    msg = update.effective_message
    user = update.effective_user
    print(context.args)
    print(context.user_data['CC'])
    difd = int(context.user_data.get('CC')) - int(datetime.datetime.now().strftime("%w"))
    print(f"DIFD {difd}")
    difd = datetime.datetime.now() + date.timedelta(days=difd)
    frmt = difd.strftime("%d.%m.%y")
    pc = ParseDateCalendar(frmt)
    if len(pc) == 0:
        InitCalendar(frmt)
        print("INITTIME")
    if msg.text == "0":
        UpdateCalendar(f"{frmt}", "Text", "")
        await chat.send_message("–ü–æ–∑–∏—Ü—ñ—è –æ—á–∏—â–µ–Ω–∞!")
    else:
        UpdateCalendar(f"{frmt}", "Text", msg.text)
    UpdateCalendar(f"{frmt}", "WeekDay", context.user_data['CC'])
    await chat.send_message("–£—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!",reply_markup=ReplyKeyboardMarkup(k_calendar))
    return ConversationHandler.END

async def Menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    await update.effective_message.delete()
    p = Path("Data/Other/inline_additional_menu.png")
    a = await chat.send_message("„Ö§",reply_markup=ReplyKeyboardRemove())
    await a.delete()
    await chat.send_photo(photo=open(p,"rb"), reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("–†–æ–∑–∫–ª–∞–¥ –≤–∏—Ö–æ–¥—É —Å–µ—Ä—ñ–π", callback_data="calendar")],
        [InlineKeyboardButton("–í–∏–ø–∞–¥–∫–æ–≤–µ –∞–Ω—ñ–º–µ", callback_data="ra")],
        [InlineKeyboardButton(text="–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å", callback_data="na_revo"), InlineKeyboardButton(text="–ó–≤'—è–∑–æ–∫ –∑ –Ω–∞–º–∏", callback_data="calltogod")],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="rtm")]
    ]))
    """[InlineKeyboardButton("–†–æ–∑–∫–ª–∞–¥ –≤–∏—Ö–æ–¥—É —Å–µ—Ä—ñ–π", callback_data="calendar")],
        [InlineKeyboardButton("–í–∏–ø–∞–¥–∫–æ–≤–µ –∞–Ω—ñ–º–µ", callback_data="ra"), InlineKeyboardButton("‚ùå –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç", callback_data="trnt")],
        [InlineKeyboardButton("‚ùå –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å", callback_data="money_cb"),InlineKeyboardButton("‚ùå –ó–≤'—è–∑–æ–∫ –∑ –Ω–∞–º–∏", callback_data="support_cb")],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="rtm")]"""
async def CalendarInfo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not UserIsAdmin(user.id):
        return ConversationHandler.END
    else:
        await update.effective_chat.send_message("–©–æ –±–∞–∂–∞—î—à –∑—Ä–æ–±–∏—Ç–∏?",reply_markup=ReplyKeyboardMarkup(k_calendar))

async def ClearOldCalendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    msg = update.effective_message
    if UserIsAdmin(user.id):
        DeleteOldCalendar()
        await chat.send_message("–ö–∞–ª–µ–Ω–¥–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ, —Å—Ç–∞—Ä—ñ –¥–Ω—ñ –æ—á–∏—â–µ–Ω—ñ.")

async def UpdateTitleYear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    if UserIsAdmin(user.id):
        await chat.send_message("–¶–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∫—É —Ç–∞–π—Ç–ª—É", reply_markup=ReplyKeyboardMarkup(k_cancel))
        await chat.send_message("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ç–∞–π—Ç–ª —á–µ—Ä–µ–∑ @pankioto_bot:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text="–ü–æ—à—É–∫", switch_inline_query_current_chat="")]
        ]))
        return upt
    else:
        return ConversationHandler.END


async def UpdateTitleYear2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    msg = update.effective_message
    arg = msg.text.split("_")[1]
    context.user_data['tid'] = arg
    if not ParseIDTitle(arg):
        await chat.send_message("–¢–∞–∫–æ–≥–æ —Ç–∞–π—Ç–ª—É –Ω–µ —ñ—Å–Ω—É—î –Ω–µ —ñ—Å–Ω—É—î, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
    else:
        a = ParseIDTitle(arg)[0]
        if a[14] is None or a[14] == "":
            year = ""
        else:
            year = f"{a[14]}"
        await chat.send_message("–¢–∞–π—Ç–ª –ø—Ä–∏–π–Ω—è—Ç–æ.")
        await chat.send_message(f"–¢–∞–π—Ç–ª: {a[1]} {a[6]} {year}")
        await chat.send_message("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω–æ–≤–∏–π —Ä—ñ–∫ —Ç–∞–π—Ç–ª—É:")
        return upt2



async def UpdateTitleYear3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    msg = update.effective_message
    if msg.text.isdigit():
        UpdateTitles(context.user_data['tid'], "Year", msg.text)
        await chat.send_message("–†—ñ–∫ –∑–º—ñ–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!",reply_markup=ReplyKeyboardMarkup(k_advtools))
        return ConversationHandler.END
    else:
        await chat.send_message("–¢–∏ —â–æ—Å—å –Ω–µ —Ç–µ –Ω–∞–ø–∏—Å–∞–≤, –ø–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")

def main():
    app = Application.builder().token(token).build()

    app.add_handler(InlineQueryHandler(inline_query))

    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.Regex("‚ùóÔ∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"), adm_start))
    app.add_handler(MessageHandler(filters.Regex("–í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"), start_back))
    app.add_handler(MessageHandler(filters.Regex("–î–æ–±–∞–≤–∏—Ç–∏ —Ç–∞–π—Ç–ª"), add_title_pre))
    app.add_handler(MessageHandler(filters.Regex("–ù–∞–∑–∞–¥"), adm_start_back))
    app.add_handler(MessageHandler(filters.Regex("üîç –ó–Ω–∞–π—Ç–∏"), search_title_info))
    app.add_handler(MessageHandler(filters.Regex("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏"), AdminList))
    app.add_handler(MessageHandler(filters.Regex("üí≠ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"), Information))
    app.add_handler(MessageHandler(filters.Regex("–°–ø–∏—Å–æ–∫ —Ç–∞–π—Ç–ª—ñ–≤"), TitleList))
    app.add_handler(MessageHandler(filters.Regex("–ü–ª–µ—î—Ä"), playerinfo))
    app.add_handler(MessageHandler(filters.Regex("–°–ø–∏—Å–æ–∫ –ø–æ VLID"), VideoList))
    app.add_handler(MessageHandler(filters.Regex("–ö–∞–ª–µ–Ω–¥–∞—Ä"), CalendarInfo))
    app.add_handler(MessageHandler(filters.Regex("–û–Ω–æ–≤–∏—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä"), ClearOldCalendar))
    app.add_handler(MessageHandler(filters.Regex("–î–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏"), addtoolsinfo))
    app.add_handler(MessageHandler(filters.Regex("–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"), replaceinfo))
    #CMD
    app.add_handler(CommandHandler("menu", Menu))
    #app.add_handler(MessageHandler(filters.ALL, test))

    # CONV
    app.add_handler(add_title_conv)
    app.add_handler(del_title_conv)
    app.add_handler(add_videolist_conv)
    app.add_handler(del_videolist_conv)
    app.add_handler(upd_titlevlid_conv)
    app.add_handler(update_videolist_conv)
    app.add_handler(upd_info_conv)
    app.add_handler(c_s_conv)
    app.add_handler(cc_conv)
    app.add_handler(ct_conv)
    app.add_handler(get_url_conv)
    app.add_handler(cy_conv)
    app.add_handler(replace_money_conv)
    # FileID
    app.add_handler(MessageHandler(filters.VIDEO, FileID))
    # Alternative handlers
    app.add_handler(MessageHandler(filters.Regex("^/search_(\w+)$"), search_title))
    app.add_handler(MessageHandler(filters.Regex("^/video_(\w+)$"), SendVideo))
    app.add_handler(MessageHandler(filters.Regex("^/series_(\w+)$"), SeriesList))
    app.add_handler(CallbackQueryHandler(CallbackQuery))
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    if startdbs():
        main()
